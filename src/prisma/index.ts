  //@ts-nocheck
// Import the PrismaClient from the "@prisma/client" package.
import { PrismaClient } from "@prisma/client";

// Declare a variable "prisma" of type PrismaClient.
export let prisma: PrismaClient;

// Declare a global namespace for NodeJS to store the PrismaClient instance.
declare global {
  namespace NodeJS {
    interface Global {
      prisma: PrismaClient;
    }
  }
}

// Check the environment variable NODE_ENV to determine if it's "production".
if (process.env.NODE_ENV === "production") {
  // If in production, create a new instance of PrismaClient.
  prisma = new PrismaClient();
} else {
  // If not in production...
  if (!global.prisma) {
    // Check if there is no existing global PrismaClient instance.
    global.prisma = new PrismaClient(); // If not, create a new one.
  }
  // Assign the global PrismaClient instance to the "prisma" variable.
  prisma = global.prisma;
}

/**
 * Here's an explanation of what this code does:
 *  1)It imports the PrismaClient from the @prisma/client package. This is the client library generated by Prisma for interacting with your database.

    2)It declares a variable prisma of type PrismaClient. This variable will be used to make database queries and manage the database connection.

    3)It declares a global namespace for Node.js using declare global. This is done to store a single instance of the PrismaClient globally, allowing it to be reused across different parts of your application.

    4)It checks the environment variable NODE_ENV to determine if the application is running in a production environment.

    5)If the environment is set to "production," it creates a new instance of the PrismaClient and assigns it to the prisma variable. This ensures that each HTTP request gets its own isolated connection to the database, which is a good practice in production to avoid resource leaks.

    6)If the environment is not in "production," it checks if there is already a global prisma instance. If one doesn't exist, it creates a new instance of PrismaClient and assigns it to the global prisma variable. If there is an existing global prisma instance, it simply assigns it to the local prisma variable. This allows the application to reuse the same database connection across multiple requests in a development or non-production environment, improving performance.

  The code essentially sets up a Prisma database client in a way that is suitable for both development and production environments, ensuring that connections are managed efficiently. 
  It uses a global variable to store the client instance, which is a common pattern to share database connections across an application
 */